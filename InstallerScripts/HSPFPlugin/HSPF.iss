; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;;#define Debug
;;#define x64BitVersion

#ifdef x64BitVersion
  #define MySource = "Source-x64"
  #define MyBitVersion = "64bit"
#else
  #define MySource = "Source-x86"
  #define MyBitVersion = "32bit"
#endif

#define MyAppName "HSPF"
#define MyAppVerName "12.5"
#define MyAppPublisher "US EPA and AQUA TERRA Consultants"
#define MyAppURL "http://water.epa.gov/scitech/datait/models/basins/"
#define MyAppExeName "WinHSPF.exe"

;; Naming of the installer
#ifdef BetaVersion
  #ifdef x64BitVersion
    #define MyOutputBaseFilename MyAppName + MyAppVerName + "-Beta-x64"
  #else
    #define MyOutputBaseFilename MyAppName + MyAppVerName + "-Beta"
  #endif
#else
  #ifdef x64BitVersion
    #define MyOutputBaseFilename MyAppName + MyAppVerName + "-x64"
  #else
	 #define MyOutputBaseFilename MyAppName + MyAppVerName
  #endif
#endif

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
#ifdef x64BitVersion
;  AppID={{E299D00B-37A1-4ac9-8B93-9A635CBA384B}
; "ArchitecturesAllowed=x64" specifies that Setup cannot run on
; anything but x64.
  ArchitecturesAllowed=x64
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
  ArchitecturesInstallIn64BitMode=x64
  DefaultDirName={pf64}\BASINS
#else
;  AppID={{C6F5ABCC-A45A-4abf-9FC6-B1EE38060D86}
  DefaultDirName={reg:HKLM\SOFTWARE\AQUA TERRA Consultants\BASINS45,Base Directory|C:\BASINS45}
#endif
PrivilegesRequired=none
MinVersion=0,5
AppName={#MyAppName}
AppVerName={#MyAppName} {#MyAppVerName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppVersion={#MyAppVerName}
AppContact={#MyAppURL}
VersionInfoCompany={#MyAppPublisher}
VersionInfoCopyright=Mozilla Public License (MPL) 1.1
VersionInfoDescription={#MyAppName} {#MyAppVerName}
VersionInfoProductName={#MyAppName}
VersionInfoProductVersion={#MyAppVerName}
DefaultGroupName="BASINS"
;If this is set to auto, at startup Setup will look in the registry
;to see if the same application is already installed, and if so, it
;will not show the Select Start Menu Folder wizard page.
AllowNoIcons=true
AlwaysShowComponentsList=false
InfoBeforeFile=install.txt
OutputDir=Output
OutputBaseFilename={#MyOutputBaseFilename}
SetupIconFile=basins.ico
UninstallDisplayName={#MyAppName}
ChangesAssociations=false
Compression=lzma/Ultra
SolidCompression=true
InternalCompressLevel=Ultra
WizardImageFile=BasinsInstall.bmp
WizardSmallImageFile=BasinsSmall.bmp
VersionInfoVersion={#MyAppVerName}
#ifdef Debug
  SetupLogging=true
#endif
UninstallLogMode=append
SetupLogging=true
ShowComponentSizes=false
AlwaysShowGroupOnReadyPage=true
UninstallDisplayIcon=basins.ico

[Files]
;C++ Distributables
#ifdef x64BitVersion
  Source: vcfiles\vcredist_x64_2010.exe; DestDir: {tmp}; Flags: deleteafterinstall 64bit ignoreversion
#else
  Source: vcfiles\vcredist_x86_2008.exe; DestDir: {tmp}; Flags: deleteafterinstall 32bit ignoreversion
  Source: vcfiles\msvcr90.dll; DestDir: {sys}; Flags: restartreplace 32bit uninsneveruninstall sharedfile
#endif
#include "include\Files_winhspf.txt"
  
[Icons]
#include "include\Icons_winhspf.txt"

[Run]

[Types]
Name: Full; Description: Full installation
Name: Custom; Description: Custom installation; Flags: iscustom

[Components]
Name: "hspf";    Description: "HSPF and Related Programs"; Types: full
;Name: "swat";    Description: "SWAT Databases";            Types: full
;Name: "gwlf";    Description: "GWLF-E";                    Types: full
Name: "desktop"; Description: "Desktop Icons";             Types: full

[UninstallDelete]
Name: {app}\bin; Type: filesandordirs; Components:
Name: {app}; Type: files; Components:
Name: {app}; Type: dirifempty; Components:

[Dirs]
Name: {app}; Permissions: everyone-modify
Name: {app}\bin; Permissions: everyone-modify
Name: {app}\bin\Styles; Permissions: everyone-modify;
Name: {app}\data; Permissions: everyone-modify

[Registry]
#include "include\Registry_winhspf.txt"

[Code]
function MsiQueryProductState(ProductCode: PAnsiChar): Integer;
external 'MsiQueryProductStateA@msi.dll stdcall';

const
  INSTALLLEVEL_MAXIMUM = $ffff;
	INSTALLSTATE_BADCONFIG = -6;
	INSTALLSTATE_INCOMPLETE = -5;
	INSTALLSTATE_SOURCEABSENT = -4;
	INSTALLSTATE_MOREDATA = -3;
	INSTALLSTATE_INVALIDARG = -2;      // An invalid parameter was passed to the function.
	INSTALLSTATE_UNKNOWN = -1;         // The product is neither advertised or installed.
	INSTALLSTATE_BROKEN = 0;
	INSTALLSTATE_ADVERTISED = 1;       // The product is advertised but not installed.
  INSTALLSTATE_ABSENT = 2;           // The product is installed for a different user.
	INSTALLSTATE_LOCAL = 3;
	INSTALLSTATE_SOURCE = 4;
  INSTALLSTATE_DEFAULT = 5;          // The product is installed for the current user.

  // VC 2005 redist: {675C0FCE-58D9-435D-9AD8-ACDCB5808A3A}
  //Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.17: {9A25302D-30C0-39D9-BD6F-21E6EC160475}
const
	VCREDIST_X86 = '{9A25302D-30C0-39D9-BD6F-21E6EC160475}';
	VCREDIST_X64 = '{DA5E371C-6333-3D8A-93A4-6FD5B20BCC6E}';
  ErrorInstallVC = 'Error installing the VC++ redistributables!';

function IsDotNET20Detected(): boolean;
var
  NetSuccess: boolean;
  NetInstall: cardinal;
begin
  NetSuccess := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v2.0.50727', 'Install', NetInstall);
  Result := NetSuccess and (NetInstall = 1);
#ifdef Debug
  if Result then
		MsgBox('Found DotNET20', mbInformation, MB_OK);
#endif
end;

function IsDotNET35Detected(): boolean;
var
  NetSuccess: boolean;
  NetInstall: cardinal;
begin
  NetSuccess := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5', 'Install', NetInstall);
  Result := NetSuccess and (NetInstall = 1);
#ifdef Debug
  if Result then
		MsgBox('Found DotNET35', mbInformation, MB_OK);
#endif
end;

function IsDotNET4Detected(): boolean;
var
  NetSuccess: boolean;
  NetInstall: cardinal;
begin
  NetSuccess := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full', 'Install', NetInstall);
  Result := NetSuccess and (NetInstall = 1);
#ifdef Debug
  if Result then
		MsgBox('Found DotNET4', mbInformation, MB_OK);
#endif
end;

function IsMsiProductInstalled(const ProductId: string): boolean;
var
	queryResult: Integer;
begin
#ifdef Debug
	MsgBox('Checking for ' + ProductId, mbInformation, MB_OK);
#endif
	queryResult := MsiQueryProductState(ProductId);

#ifdef Debug
		MsgBox('MsiQueryProductState: ' + IntToStr(queryResult), mbInformation, MB_OK);
#endif

	Result := queryResult = INSTALLSTATE_DEFAULT;
end;

function NeedInstallVC8(): Boolean;
begin

  // Check reg key:
	Result := not IsMsiProductInstalled(VCREDIST_X86);

#ifdef Debug
  if Result then
  begin
		MsgBox('Could not find VCREDIST, will install', mbInformation, MB_OK);
	end
	else
	begin
		MsgBox('Found VCREDIST, no need to install', mbInformation, MB_OK);
	end;
#endif
end;

function NeedInstallVC10_x64(): Boolean;
begin

  // Check reg key:
	Result := not IsMsiProductInstalled(VCREDIST_X64);

#ifdef Debug
  if Result then
  begin
		MsgBox('Could not find VCREDIST, will install', mbInformation, MB_OK);
	end
	else
	begin
		MsgBox('Found VCREDIST, no need to install', mbInformation, MB_OK);
	end;
#endif
end;

function InstallDotNET(versionDotNET: string; file1: String; file2: String; urlFamilyID: String): Boolean;
var
	ExpectedLocalLocation: String;
	ErrorCode: Integer;
begin
	ExpectedLocalLocation := ExpandConstant('{src}') + '\' + file1;
	if not FileExists(ExpectedLocalLocation) then
		ExpectedLocalLocation := ExpandConstant('{src}') + '\' + file2;

	if FileExists(ExpectedLocalLocation) then
	begin
		ShellExec('open', ExpectedLocalLocation, '', '', SW_SHOW, ewNoWait, ErrorCode);
		Result := MsgBox('Ready to continue MapWindow installation?' #13#13 '(Click Yes after installing .Net Framework ' + versionDotNET + ')', mbConfirmation, MB_YESNO) = idYes;
	end
	else
	begin
		if MsgBox('The .Net Framework ' + versionDotNET + ' is required but was not found.' #13#13 'Open the web page for downloading .Net ' + versionDotNET + ' now?', mbConfirmation, MB_YESNO) = idYes	then
		begin
			ShellExec('open', 'http://www.microsoft.com/downloads/details.aspx?FamilyID=' + urlFamilyID, '', '', SW_SHOW, ewNoWait, ErrorCode)
			Result := MsgBox('Ready to continue MapWindow installation?' #13#13 '(Click Yes after installing .Net Framework ' + versionDotNET + ')', mbConfirmation, MB_YESNO) = idYes;
		end
		else
			Result := MsgBox('.Net ' + versionDotNET + ' Framework is required but was not found.' #13#13 'Continue MapWindow installation?', mbConfirmation, MB_YESNO) = idYes;
	end;
end;

function CheckDotNetVersions(): Boolean;
begin

  // No need to check for v2.0 anymore
  // v3.5 will also install v3.0 en v2.0 if necessary (Thanks to Fred for pointing this out)
  // v2.0
  //Result := IsDotNET20Detected();
  //if not Result then
  //begin
  //  Result := InstallDotNET('v2.0', 'dotnetfx20.exe', 'dotnetfx_v2.0.exe', '79BC3B77-E02C-4AD3-AACF-A7633F706BA5');
	//end;

#ifdef x64BitVersion
  // v4
  Result := IsDotNET4Detected();
  if not Result then
  begin
    Result := InstallDotNET('v4', 'dotnetfx4.exe', 'dotnetfx_v4.exe', '9cfb2d51-5ff4-4491-b0e5-b386f32c0992');
	end;
#else
  // v3.5
  Result := IsDotNET35Detected();
  if not Result then
  begin
    Result := InstallDotNET('v3.5', 'dotnetfx35.exe', 'dotnetfx_v3.5.exe', 'AB99342F-5D1A-413D-8319-81DA479AB0D7');
	end;
#endif
end;

// Called when the user clicks the Next button. If you return True, the wizard will move to the next page;
// if you return False, it will remain on the current page (specified by CurPageID).
// Note that this function is called on silent installs as well, even though there is no Next button
// that the user can click. Setup instead simulates "clicks" on the Next button. On a silent install,
// if your NextButtonClick function returns False prior to installation starting, Setup will exit automatically.
function NextButtonClick(CurPage: Integer): Boolean;
begin

//  if CurPage = wpWelcome then MsgBox('In NextButtonClick: wpWelcome', mbInformation, MB_OK);
//  if CurPage = wpInfoBefore then MsgBox('In NextButtonClick: wpInfoBefore', mbInformation, MB_OK);
//  if CurPage =  wpUserInfo then MsgBox('In NextButtonClick: wpUserInfo', mbInformation, MB_OK);
//  if CurPage =  wpSelectDir then MsgBox('In NextButtonClick: wpSelectDir', mbInformation, MB_OK);
//  if CurPage =  wpSelectComponents then MsgBox('In NextButtonClick: wpSelectComponents', mbInformation, MB_OK);
//  if CurPage =  wpSelectProgramGroup then MsgBox('In NextButtonClick: wpSelectProgramGroup', mbInformation, MB_OK);
//  if CurPage =  wpSelectTasks then MsgBox('In NextButtonClick: wpSelectTasks', mbInformation, MB_OK);
//  if CurPage =  wpReady then MsgBox('In NextButtonClick: wpReady', mbInformation, MB_OK);
//  if CurPage =  wpPreparing then MsgBox('In NextButtonClick: wpPreparing', mbInformation, MB_OK);
//  if CurPage =  wpInstalling then MsgBox('In NextButtonClick: wpInstalling', mbInformation, MB_OK);
//  if CurPage =  wpInfoAfter then MsgBox('In NextButtonClick: wpInfoAfter', mbInformation, MB_OK);
//  if CurPage =  wpFinished then MsgBox('In NextButtonClick: wpFinished', mbInformation, MB_OK);

  if CurPage =  wpSelectDir then
  begin
    //UninstallPreviousversions();
  end;

  Result := True;
end;

//Called during Setup's initialization. Return False to abort Setup, True otherwise.
function InitializeSetup(): Boolean;
var
  R1: Boolean;
  NeedToInstallVC: Boolean;
  InstalledSuccesfully: Boolean;
  ResultCode: Integer;
  vcredistFile: string;
begin
  R1 := True;

  // Check for .NET prerequisites
	Result := CheckDotNetVersions();
	if Result then
	begin

		begin
			// Check for VC++
#ifdef x64BitVersion
			NeedToInstallVC := NeedInstallVC10_x64;
      vcredistFile := 'vcredist_x64_2010.exe';
#else
			NeedToInstallVC := NeedInstallVC8;
      vcredistFile := 'vcredist_x86_2008.exe';
#endif
			if NeedToInstallVC then
			begin
				// Extracts the specified file from the [Files] section to a temporary directory:
				ExtractTemporaryFile(vcredistFile);
				InstalledSuccesfully := Exec(ExpandConstant('{tmp}\' + vcredistFile), '/qb!', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
				if not InstalledSuccesfully then
				begin
					MsgBox(ErrorInstallVC + SysErrorMessage(ResultCode), mbCriticalError, MB_OK);
					// Still need to install so stop installation:
					NeedToInstallVC := true;
				end;
			end
      else
      begin
        // Don't needed to install so set installed is true:
        InstalledSuccesfully := True;
      end;
		end;
	end;

  Result := Result And R1 And InstalledSuccesfully;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
	if CurUninstallStep = usUninstall then
	begin
		
	end;
end;

[InnoIDE_Settings]
;#ifdef Debug
;  LogFile="C:\BasinsSetupDebug.log"
;#endif
