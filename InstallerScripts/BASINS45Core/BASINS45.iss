; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;;#define Debug
;;#define x64BitVersion

#ifdef x64BitVersion
  #define MySource = "Source-x64"
  #define MyBitVersion = "64bit"
#else
  #define MySource = "Source-x86"
  #define MyBitVersion = "32bit"
#endif

#define MyAppName "BASINS"
#define MyAppVerName "4.5.2018.07.01"
#define MyAppPublisher "US EPA and RESPEC"
#define MyAppURL "http://water.epa.gov/scitech/datait/models/basins/"
#define MyAppExeName "BASINS.exe"

;; Naming of the installer
#ifdef BetaVersion
  #ifdef x64BitVersion
    #define MyOutputBaseFilename MyAppName + MyAppVerName + "-Beta-x64"
  #else
    #define MyOutputBaseFilename MyAppName + MyAppVerName + "-Beta"
  #endif
#else
  #ifdef x64BitVersion
    #define MyOutputBaseFilename MyAppName + MyAppVerName + "-x64"
  #else
	 #define MyOutputBaseFilename MyAppName + MyAppVerName
  #endif
#endif

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
#ifdef x64BitVersion
  AppID={{E299D00B-37A1-4ac9-8B93-9A635CBA384B}
; "ArchitecturesAllowed=x64" specifies that Setup cannot run on
; anything but x64.
  ArchitecturesAllowed=x64
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
  ArchitecturesInstallIn64BitMode=x64
  DefaultDirName={pf64}\BASINS
#else
  AppID={{C6F5ABCC-A45A-4abf-9FC6-B1EE38060D86}
  DefaultDirName={reg:HKLM\SOFTWARE\AQUA TERRA Consultants\BASINS45,Base Directory|C:\BASINS45}
#endif
PrivilegesRequired=poweruser
MinVersion=0,5
AppName={#MyAppName}
AppVerName={#MyAppName} {#MyAppVerName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppVersion={#MyAppVerName}
AppContact={#MyAppURL}
VersionInfoCompany={#MyAppPublisher}
VersionInfoCopyright=Mozilla Public License (MPL) 1.1
VersionInfoDescription={#MyAppName} {#MyAppVerName}
VersionInfoProductName={#MyAppName}
VersionInfoProductVersion={#MyAppVerName}
DefaultGroupName={#MyAppName}
;If this is set to auto, at startup Setup will look in the registry
;to see if the same application is already installed, and if so, it
;will not show the Select Start Menu Folder wizard page.
AllowNoIcons=true
AlwaysShowComponentsList=false
InfoBeforeFile=..\..\install.txt
OutputDir=..\..\Output
OutputBaseFilename={#MyOutputBaseFilename}
SetupIconFile={#MySource}\App\MapWindow.ico
UninstallDisplayName={#MyAppName}
ChangesAssociations=true
Compression=lzma/Ultra
SolidCompression=true
InternalCompressLevel=Ultra
WizardImageFile=..\..\BasinsInstall.bmp
WizardSmallImageFile=..\..\BasinsSmall.bmp
VersionInfoVersion={#MyAppVerName}
#ifdef Debug
  SetupLogging=true
#endif
UninstallLogMode=append
SetupLogging=true
ShowComponentSizes=false
AlwaysShowGroupOnReadyPage=true
UninstallDisplayIcon={app}\bin\MapWindow.ico

[Files]
Source: {#MySource}\App\MapWindow.ico; DestDir: {app}\bin; Flags: ignoreversion {#MyBitVersion}; Components: MapWindow_GIS
Source: {#MySource}\App\Basins.ico; DestDir: {app}\bin; Flags: ignoreversion {#MyBitVersion}; Components: MapWindow_GIS
;C++ Distributables
#ifdef x64BitVersion
  Source: Source\..\..\Documents\vcredist_x64\vcredist_x64_2010.exe; DestDir: {tmp}; Flags: deleteafterinstall 64bit ignoreversion
#else
  Source: Source\..\..\Documents\vcredist_x86_2008.exe; DestDir: {tmp}; Flags: deleteafterinstall 32bit ignoreversion
  Source: {#MySource}\App\msvcr90.dll; DestDir: {sys}; Flags: restartreplace 32bit uninsneveruninstall sharedfile
#endif
Source: ..\..\bin\D4EMDownload\*; DestDir: {app}\bin\D4EMDownload; Flags: recursesubdirs

;Begin MapWindow core files
#include "..\includes\MapWindow-Core.txt"
;Begin MapWindow Application Plugins
#include "..\includes\MW-CorePlugins.txt"
;Optional plug-ins
#include "..\includes\MW-OptionalPlugins.txt"
;Datum Shift Files
#include "..\includes\proj_nad.txt"
;GDAL projection CSV data
#include "..\includes\gdal_data.txt"
;Watershed plug-in
#include "..\includes\Watershed_Delineation_Plug_in.txt"
;TauDEM v5
#include "..\includes\TauDEMv5.txt"
;Styles files
#include "..\includes\MW-Styles.txt"
;Projections files
#include "..\includes\Projections.txt"
;BASINS core files
#include "..\..\include\Files_BASINS-Core.txt"

;Begin MapWindow United States Sample Project
;#include "Source\..\..\includes\SampleProject-US.txt"
;Begin MapWindow World Sample Project
;#include "Source\..\..\includes\SampleProject-World.txt"
;Begin Newton sample
;#include "Source\..\..\includes\SampleProject-Newton.txt"
;Begin Photoviewer sample
;#include "Source\..\..\includes\SampleProject-Photoviewer.txt"
;Begin Tiles sample
;#include "Source\..\..\includes\SampleProject-Tiles.txt"
;Begin The Netherlands sample
;#include "Source\..\..\includes\SampleProject-TheNetherlands.txt"

;Web Shortcuts
;Source: Source\..\..\Documents\forums.url; DestDir: {app}
;Source: Source\..\..\Documents\mailinglists.url; DestDir: {app}
;Source: Source\..\..\Documents\bugreport.url; DestDir: {app}
;Create survey key (if the user wants to take the survey)
;Source: Source\..\..\Documents\CreateSurveyKey.exe; DestDir: {tmp}; Flags: ignoreversion 32bit
;Testing tool
;Source: {#MySource}\App\TestingTool.exe; DestDir: {app}\bin\; Flags: ignoreversion {#MyBitVersion}; Components: TestingTool
;Source: {#MySource}\App\System.Data.SQLite.dll; DestDir: {app}\bin\; Flags: ignoreversion {#MyBitVersion}; Components: TestingTool
;Donate page:
;Source:  Source\..\..\Documents\DanLab.bmp; Flags: dontcopy

[Icons]
;Name: {commonprograms}\{#MyAppName}\{#MyAppName}; Filename: {app}\bin\{#MyAppExeName}; WorkingDir: {app}; IconFilename: {app}\bin\MapWindow.ico;
;Name: {commonprograms}\{#MyAppName}\{cm:UninstallProgram,{#MyAppName}}; Filename: {uninstallexe}; IconFilename: {app}\bin\MapWindow.ico;
;Name: {commonprograms}\{#MyAppName}\Restore Defaults; Filename: {app}\bin\{#MyAppExeName}; Parameters: /resettodefaults; IconFilename: {app}\bin\MapWindow.ico;
;Name: {commonprograms}\{#MyAppName}\TestingTool; Filename: {app}\bin\TestingTool.exe; Components: TestingTool

;Name: {commonprograms}\{#MyAppName}\Sample Projects\Newton Reservoir; Filename: {app}\Sample Projects\Newton\Newton.mwprj; Components: Sample_data; IconFilename: {app}\bin\MapWindow.ico; Flags: CreateOnlyIfFileExists;
;Name: {commonprograms}\{#MyAppName}\Sample Projects\USA; Filename: {app}\Sample Projects\United States\United States.mwprj; Components: Sample_data; IconFilename: {app}\bin\MapWindow.ico; Flags: CreateOnlyIfFileExists;
;Name: {commonprograms}\{#MyAppName}\Sample Projects\World; Filename: {app}\Sample Projects\World\World.mwprj; Components: Sample_data; IconFilename: {app}\bin\MapWindow.ico; Flags: CreateOnlyIfFileExists;
;Name: {commonprograms}\{#MyAppName}\Sample Projects\Photoviewer; Filename: {app}\Sample Projects\Photoviewer\Photoviewer.mwprj; Components: Photo_viewer; IconFilename: {app}\bin\MapWindow.ico; Flags: CreateOnlyIfFileExists;
;Name: {commonprograms}\{#MyAppName}\Sample Projects\Tiles; Filename: {app}\Sample Projects\Tiles\Tiles.mwprj; Components: mwTiles; IconFilename: {app}\bin\MapWindow.ico; Flags: CreateOnlyIfFileExists
;Name: {commonprograms}\{#MyAppName}\Sample Projects\The Netherlands; Filename: {app}\Sample Projects\The Netherlands\The Nederlands.mwprj; Components: Sample_data; IconFilename: {app}\bin\MapWindow.ico; Flags: CreateOnlyIfFileExists

;Name: {commonprograms}\{#MyAppName}\Help\Discussion Forums; Filename: {app}\forums.url; IconFilename: {app}\bin\MapWindow.ico;
;Name: {commonprograms}\{#MyAppName}\Help\Mailing Lists; Filename: {app}\mailinglists.url; IconFilename: {app}\bin\MapWindow.ico;
;Name: {commonprograms}\{#MyAppName}\Help\Report a Bug; Filename: {app}\bugreport.url; IconFilename: {app}\bin\MapWindow.ico;
;Name: {commondesktop}\{#MyAppName}; Filename: {app}\bin\{#MyAppExeName}; IconFilename: {app}\bin\MapWindow.ico;
;Name: {app}\{#MyAppName}; Filename: {app}\bin\{#MyAppExeName}; IconFilename: {app}\bin\MapWindow.ico;
;Name: {group}\{cm:UninstallProgram, {#MyAppName}}; Filename: {uninstallexe};
;Name: "{commondesktop}\WinHSPF Light"; Filename: "{app}\models\HSPF\bin\WinHSPFLt.exe";   IconFilename: "{app}\bin\Basins.ico";   WorkingDir:"{app}"; Components: desktop
#include "..\..\include\Icons_BASINS-Core.txt"

[Run]
;VC++ redistributables
;If a check function (or the boolean expression) returns True, the entry is processed otherwise it's skipped.
;Filename: {tmp}\vcredist_x86_2008.exe; WorkingDir: {tmp}; StatusMsg: Installing C++ libraries (2008 sp1)...; Check: NeedInstallVC8; Flags: skipifdoesntexist {MyBitVersion} runasoriginaluser; Languages: ; Components:
;Run some command files:
Filename: {app}\bin\regMapWinGIS.cmd; WorkingDir: {app}\bin; Flags: runhidden
;Creates the Survey key if the user wishes to take the survey
;Filename: {tmp}\CreateSurveyKey.exe; WorkingDir: {tmp}; Description: "{cm:RunSurvey}"; Flags: postinstall runhidden skipifsilent skipifdoesntexist 32bit;
;Start MapWindow
;Filename: {app}\bin\{#MyAppExeName}; Parameters: /resettodefaults /silent; WorkingDir: {app}; Description: "{cm:RunReset}"; Flags: postinstall skipifsilent nowait {#MyBitVersion}
;Filename: {app}\bin\{#MyAppExeName}; WorkingDir: {app}; Description: Start MapWindow GIS?; Flags: postinstall skipifsilent nowait {#MyBitVersion}

[Types]
Name: Full; Description: Full installation
Name: Custom; Description: Custom installation; Flags: iscustom

[Components]
Name: MapWindow_GIS; Description: "BASINS Core Components"; ExtraDiskSpaceRequired: 0; Flags: fixed; Types: Custom Full
;Name: Gerd_tools; Description: Gerd Tools: made by Dr. Gerd Dowideit; ExtraDiskSpaceRequired: 61440; Types: Custom Full
;Name: Graph_tool; Description: Graph Tool - A simple graph representation of GIS data; ExtraDiskSpaceRequired: 552960; Types: Full Custom
;Name: GPS; Description: GPS (Global Positioning System): Allows MapWindow to connect to a GPS unit.; ExtraDiskSpaceRequired: 344064; Types: Full Custom
;Name: Google_Geocoder; Description: Google Geocoder: Finds coordinates for addresses.; ExtraDiskSpaceRequired: 45056; Types: Full Custom
;Name: Launch_tool; Description: Launch Tool: View the current MapWindow project in other mapping software, like Google Maps/Earth, Open Street Map; ExtraDiskSpaceRequired: 20480; Types: Full Custom
;Name: Measure_Tool; Description: Measure Tool: Advanced measuring tool showing more output than built-in tools.; ExtraDiskSpaceRequired: 61440; Types: Full Custom
;Name: MeemsTools; Description: MeemsTools: a set of plug-in tools including UpdateMeasurements and join external datasources; ExtraDiskSpaceRequired: 3379200; Types: Full Custom
;Name: MServGenerator; Description: MapServer Generator: Create a MapServer project; ExtraDiskSpaceRequired: 258048; Types: Full Custom
;Name: Balloon_identifier; Description: Balloon identifier; ExtraDiskSpaceRequired: 36864; Types: Custom Full
;Name: Online_Data_Plug_in; Description: Online Data Plug-in: Allows access to ArcIMS and OGC-Compliant data sources.; ExtraDiskSpaceRequired: 8655356; Types: Full Custom
;Name: Open_Metadata_Manager; Description: Open Metadata Manager: Display and edit metadata for your GIS datasets.; ExtraDiskSpaceRequired: 2195456; Types: Full Custom
;Name: PathAnalyzer; Description: Path Analyzer; ExtraDiskSpaceRequired: 208896; Types: Full Custom
;Name: Photo_viewer; Description: Photo Viewer: View Photos and Descriptions; ExtraDiskSpaceRequired: 241664; Types: Full Custom
;Name: Shapefile2grid; Description: Shapefile to Grid: Create a new grid file from a polygon, line or point shapefile; ExtraDiskSpaceRequired: 73728; Types: Full Custom
;Name: SpatialConverter; Description: Spatial Converter: to convert different types of file formats; ExtraDiskSpaceRequired: 241664; Types: Custom Full
;Name: Sample_data; Description: Sample projects; ExtraDiskSpaceRequired: 49745920; Types: Custom Full
;Name: Watershed_Delineation_Plug_in; Description: Automatic Watershed Delineation: Performs automatic watershed and stream delineation on DEMs (digital elevation models), using TauDEM v5; ExtraDiskSpaceRequired: 3760128; Types: Full Custom
Name: mwTiles; Description: Tiles plug-in: View web map background layer from OpenStreetMap; ExtraDiskSpaceRequired: 57344; Types: Custom Full
;Name: Kriging; Description: Kriging plug-in: A group of geostatistical techniques to interpolate the value of a random field; ExtraDiskSpaceRequired: 65536; Types: Custom Full
;Name: TestingTool; Description: Testing tool: Run the test scripts in a batch process; ExtraDiskSpaceRequired: 3908608; Types: Custom Full
;Name: DataClient; Description: DataClient: Connects with several geo-databases (binaries provided by Poom); ExtraDiskSpaceRequired: 14659584; Types: Custom Full
;Name: VnRPToolkit; Description: Vector and Raster Processing Toolkit: Set of tools like Shape2Kml, Shape2Gml and Shape2GeoJSON (binaries provided by Reddy); ExtraDiskSpaceRequired: 3694592; Types: Custom Full
;Name: GridAnalysis; Description: Grid Analysis tools: Histogram, Scatter, Calculator, etc. ; ExtraDiskSpaceRequired: 548864; Types: Custom Full
;Name: AcadExporter; Description: The ACAD Exporter was written to export all entities visible in the window to AutoCAD ; ExtraDiskSpaceRequired: 54546; Types: Custom Full
;Name: SwiftD; Description: The SwiftD plug-in facilitates the completion of simple tasks (done) swiftly (or quickly) using already available functions and capabilities ; ExtraDiskSpaceRequired: 708608; Types: Custom Full
;Name: TableEditorNew; Description: This is a rewritten version of the Table editor. For now it is added as a plug-in. Please test it so we can replace to old editor; ExtraDiskSpaceRequired: 364544; Types: Custom Full
Name: "desktop"; Description: "Desktop Icons";             Types: full

[UninstallDelete]
Name: {app}\bin; Type: filesandordirs; Components:
Name: {app}; Type: files; Components:
Name: {app}; Type: dirifempty; Components:

[Dirs]
Name: {app}; Permissions: everyone-modify
Name: {app}\bin; Permissions: everyone-modify
Name: {app}\bin\D4EMDownload; Permissions: everyone-modify
Name: {app}\bin\D4EMDownload\gdal; Permissions: everyone-modify
Name: {app}\bin\D4EMDownload\Taudem5Exe; Permissions: everyone-modify
Name: {app}\bin\Styles; Permissions: everyone-modify;

[Registry]
;Installation Path
; TODO: Somehow InstallPath is not added to the registry, Version is!
Root: HKLM; Subkey: Software\BASINS; ValueType: string; ValueName: InstallPath; ValueData: {app}; Flags: uninsdeletekey createvalueifdoesntexist;
Root: HKLM; Subkey: Software\BASINS; ValueType: string; ValueName: Version; ValueData: {#MyAppVerName}; Flags: uninsdeletekey createvalueifdoesntexist;
Root: HKLM; Subkey: Software\AQUA TERRA Consultants\BASINS\files; ValueType: string; ValueName: MetStations.dbf; ValueData: {app}\etc\MetStations.dbf; Flags: uninsdeletekey createvalueifdoesntexist;
;Watershed plug-in
#include "Source\..\..\includes\TauDEMv5_registry.txt"
#include "..\..\include\Registry_BASINS-Core.txt"

[Code]
function MsiQueryProductState(ProductCode: PAnsiChar): Integer;
external 'MsiQueryProductStateA@msi.dll stdcall';

const
  INSTALLLEVEL_MAXIMUM = $ffff;
	INSTALLSTATE_BADCONFIG = -6;
	INSTALLSTATE_INCOMPLETE = -5;
	INSTALLSTATE_SOURCEABSENT = -4;
	INSTALLSTATE_MOREDATA = -3;
	INSTALLSTATE_INVALIDARG = -2;      // An invalid parameter was passed to the function.
	INSTALLSTATE_UNKNOWN = -1;         // The product is neither advertised or installed.
	INSTALLSTATE_BROKEN = 0;
	INSTALLSTATE_ADVERTISED = 1;       // The product is advertised but not installed.
  INSTALLSTATE_ABSENT = 2;           // The product is installed for a different user.
	INSTALLSTATE_LOCAL = 3;
	INSTALLSTATE_SOURCE = 4;
  INSTALLSTATE_DEFAULT = 5;          // The product is installed for the current user.

  // VC 2005 redist: {675C0FCE-58D9-435D-9AD8-ACDCB5808A3A}
  //Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.17: {9A25302D-30C0-39D9-BD6F-21E6EC160475}
const
	VCREDIST_X86 = '{9A25302D-30C0-39D9-BD6F-21E6EC160475}';
	VCREDIST_X64 = '{DA5E371C-6333-3D8A-93A4-6FD5B20BCC6E}';
  ErrorInstallVC = 'Error installing the VC++ redistributables!';

function IsDotNET20Detected(): boolean;
var
  NetSuccess: boolean;
  NetInstall: cardinal;
begin
  NetSuccess := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v2.0.50727', 'Install', NetInstall);
  Result := NetSuccess and (NetInstall = 1);
#ifdef Debug
  if Result then
		MsgBox('Found DotNET20', mbInformation, MB_OK);
#endif
end;

function IsDotNET35Detected(): boolean;
var
  NetSuccess: boolean;
  NetInstall: cardinal;
begin
  NetSuccess := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5', 'Install', NetInstall);
  Result := NetSuccess and (NetInstall = 1);
#ifdef Debug
  if Result then
		MsgBox('Found DotNET35', mbInformation, MB_OK);
#endif
end;

function IsDotNET4Detected(): boolean;
var
  NetSuccess: boolean;
  NetInstall: cardinal;
begin
  NetSuccess := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full', 'Install', NetInstall);
  Result := NetSuccess and (NetInstall = 1);
#ifdef Debug
  if Result then
		MsgBox('Found DotNET4', mbInformation, MB_OK);
#endif
end;

function IsMsiProductInstalled(const ProductId: string): boolean;
var
	queryResult: Integer;
begin
#ifdef Debug
	MsgBox('Checking for ' + ProductId, mbInformation, MB_OK);
#endif
	queryResult := MsiQueryProductState(ProductId);

#ifdef Debug
		MsgBox('MsiQueryProductState: ' + IntToStr(queryResult), mbInformation, MB_OK);
#endif

	Result := queryResult = INSTALLSTATE_DEFAULT;
end;

function NeedInstallVC8(): Boolean;
begin

  // Check reg key:
	Result := not IsMsiProductInstalled(VCREDIST_X86);

#ifdef Debug
  if Result then
  begin
		MsgBox('Could not find VCREDIST, will install', mbInformation, MB_OK);
	end
	else
	begin
		MsgBox('Found VCREDIST, no need to install', mbInformation, MB_OK);
	end;
#endif
end;

function NeedInstallVC10_x64(): Boolean;
begin

  // Check reg key:
	Result := not IsMsiProductInstalled(VCREDIST_X64);

#ifdef Debug
  if Result then
  begin
		MsgBox('Could not find VCREDIST, will install', mbInformation, MB_OK);
	end
	else
	begin
		MsgBox('Found VCREDIST, no need to install', mbInformation, MB_OK);
	end;
#endif
end;


// Checks for a MapWinGIS ocx in the given classID. If it's found, it's unregistered and renamed,
// or, failing renaming, deleted.
procedure UnregisterMapWinGIS(clsname: String; Rename: Boolean);
var
  Path: String;
begin
  try
    if RegQueryStringValue(HKEY_CLASSES_ROOT, 'CLSID\' + clsname + '\InprocServer32', '', Path) then
    begin
      // Successfully read the value
      if Lowercase(ExtractFileName(Path)) = 'mapwingis.ocx' then
			begin
				try
					UnregisterServer(false, Path, false);
#ifdef Debug
					MsgBox('MapWinGIS is unregistered', mbInformation, MB_OK);
#endif
				except
				end;

				if Rename then
				begin
					try
						if not RenameFile(Path, ExtractFilePath(Path) + 'MapWinGIS.ocx.old') then
						begin
							DeleteFile(Path);
						end;
					except
					end;
				end
				else
				begin
					DeleteFile(Path);
				end;
			end;
    end;
  except
  end;
end;

function InstallDotNET(versionDotNET: string; file1: String; file2: String; urlFamilyID: String): Boolean;
var
	ExpectedLocalLocation: String;
	ErrorCode: Integer;
begin
	ExpectedLocalLocation := ExpandConstant('{src}') + '\' + file1;
	if not FileExists(ExpectedLocalLocation) then
		ExpectedLocalLocation := ExpandConstant('{src}') + '\' + file2;

	if FileExists(ExpectedLocalLocation) then
	begin
		ShellExec('open', ExpectedLocalLocation, '', '', SW_SHOW, ewNoWait, ErrorCode);
		Result := MsgBox('Ready to continue MapWindow installation?' #13#13 '(Click Yes after installing .Net Framework ' + versionDotNET + ')', mbConfirmation, MB_YESNO) = idYes;
	end
	else
	begin
		if MsgBox('The .Net Framework ' + versionDotNET + ' is required but was not found.' #13#13 'Open the web page for downloading .Net ' + versionDotNET + ' now?', mbConfirmation, MB_YESNO) = idYes	then
		begin
			ShellExec('open', 'http://www.microsoft.com/downloads/details.aspx?FamilyID=' + urlFamilyID, '', '', SW_SHOW, ewNoWait, ErrorCode)
			Result := MsgBox('Ready to continue MapWindow installation?' #13#13 '(Click Yes after installing .Net Framework ' + versionDotNET + ')', mbConfirmation, MB_YESNO) = idYes;
		end
		else
			Result := MsgBox('.Net ' + versionDotNET + ' Framework is required but was not found.' #13#13 'Continue MapWindow installation?', mbConfirmation, MB_YESNO) = idYes;
	end;
end;

function CheckDotNetVersions(): Boolean;
begin

  // No need to check for v2.0 anymore
  // v3.5 will also install v3.0 en v2.0 if necessary (Thanks to Fred for pointing this out)
  // v2.0
  //Result := IsDotNET20Detected();
  //if not Result then
  //begin
  //  Result := InstallDotNET('v2.0', 'dotnetfx20.exe', 'dotnetfx_v2.0.exe', '79BC3B77-E02C-4AD3-AACF-A7633F706BA5');
	//end;

  Result := IsDotNET4Detected();
  if not Result then
  begin
    Result := InstallDotNET('v4', 'dotnetfx4.exe', 'dotnetfx_v4.exe', '9cfb2d51-5ff4-4491-b0e5-b386f32c0992');
	end;
end;

function CheckForMWOCX(Rename: Boolean): Boolean;
var
  Names: TArrayOfString;
  I: Integer;
begin
	try
		if RegGetSubkeyNames(HKEY_CLASSES_ROOT, 'CLSID', Names) then
		begin
			for I := 0 to GetArrayLength(Names)-1 do
				UnregisterMapWinGIS(Names[I], Rename);
		end
		else
		begin
			// If user answers no, result is set to false and setup is halted.
			Result := MsgBox('An error has occurred while ensuring that you have no previous versions of MapWinGIS installed.' #13#13 'Please ensure that any old copies are properly uninstalled.' #13#13 'Continue installing anyway?', mbConfirmation, MB_YESNO) = idYes;
		end;
	except
	end;
end;

function UninstallPreviousversions(): Boolean;
var
  filename: string;
  ResultCode: Integer;
  reported: Boolean;
begin

  reported := False;

  // Delete previous TauDEM v5 install:
  filename := ExpandConstant('{app}\Plugins\Watershed_delin\unins000.exe');
	if FileExists(filename) then
	begin
	  MsgBox(ExpandConstant('{cm:FoundPreviousVersion}'), mbInformation, MB_OK);
    reported := True;
  	// Call the uninstaller
  	Exec(filename, '/VERYSILENT /SUPPRESSMSGBOXES', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
		// MsgBox('Uninstall is done!', mbInformation, MB_OK);
  end;

  // Check if MapWindow was already installed and uninstall it first:
  filename := ExpandConstant('{app}\unins000.exe');
	if FileExists(filename) then
	begin
	  if not reported then MsgBox(ExpandConstant('{cm:FoundPreviousVersion}'), mbInformation, MB_OK);

	  // Unregister the ocx:
  	CheckForMWOCX(false);
  	// Call the uninstaller
		Exec(filename, '/VERYSILENT /SUPPRESSMSGBOXES', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
		// MsgBox('Uninstall is done!', mbInformation, MB_OK);
  end;

  // Check if an older version of mwAcadExporter.dll was installed manually:
  filename :=  ExpandConstant('{app}\Plugins\mwAcadExporter.dll');
  if FileExists(filename) then
  begin
    DeleteFile(filename);
   end;
  Result := True;
end;

// Called when the user clicks the Next button. If you return True, the wizard will move to the next page;
// if you return False, it will remain on the current page (specified by CurPageID).
// Note that this function is called on silent installs as well, even though there is no Next button
// that the user can click. Setup instead simulates "clicks" on the Next button. On a silent install,
// if your NextButtonClick function returns False prior to installation starting, Setup will exit automatically.
function NextButtonClick(CurPage: Integer): Boolean;
begin

//  if CurPage = wpWelcome then MsgBox('In NextButtonClick: wpWelcome', mbInformation, MB_OK);
//  if CurPage = wpInfoBefore then MsgBox('In NextButtonClick: wpInfoBefore', mbInformation, MB_OK);
//  if CurPage =  wpUserInfo then MsgBox('In NextButtonClick: wpUserInfo', mbInformation, MB_OK);
//  if CurPage =  wpSelectDir then MsgBox('In NextButtonClick: wpSelectDir', mbInformation, MB_OK);
//  if CurPage =  wpSelectComponents then MsgBox('In NextButtonClick: wpSelectComponents', mbInformation, MB_OK);
//  if CurPage =  wpSelectProgramGroup then MsgBox('In NextButtonClick: wpSelectProgramGroup', mbInformation, MB_OK);
//  if CurPage =  wpSelectTasks then MsgBox('In NextButtonClick: wpSelectTasks', mbInformation, MB_OK);
//  if CurPage =  wpReady then MsgBox('In NextButtonClick: wpReady', mbInformation, MB_OK);
//  if CurPage =  wpPreparing then MsgBox('In NextButtonClick: wpPreparing', mbInformation, MB_OK);
//  if CurPage =  wpInstalling then MsgBox('In NextButtonClick: wpInstalling', mbInformation, MB_OK);
//  if CurPage =  wpInfoAfter then MsgBox('In NextButtonClick: wpInfoAfter', mbInformation, MB_OK);
//  if CurPage =  wpFinished then MsgBox('In NextButtonClick: wpFinished', mbInformation, MB_OK);

  if CurPage =  wpSelectDir then
  begin
    UninstallPreviousversions();
  end;

  Result := True;
end;

//Called during Setup's initialization. Return False to abort Setup, True otherwise.
function InitializeSetup(): Boolean;
var
  R1: Boolean;
  NeedToInstallVC: Boolean;
  InstalledSuccesfully: Boolean;
  ResultCode: Integer;
  vcredistFile: string;
begin
  R1 := True;

  // Check for .NET prerequisites
	Result := CheckDotNetVersions();
	if Result then
	begin
		// Check for old MapWinGIS.ocx'es that are registered; unregister them and rename them to .old
		R1 := CheckForMWOCX(false);

		if R1 then
		begin
			// Check for VC++
#ifdef x64BitVersion
			NeedToInstallVC := NeedInstallVC10_x64;
      vcredistFile := 'vcredist_x64_2010.exe';
#else
			NeedToInstallVC := NeedInstallVC8;
      vcredistFile := 'vcredist_x86_2008.exe';
#endif
			if NeedToInstallVC then
			begin
				// Extracts the specified file from the [Files] section to a temporary directory:
				ExtractTemporaryFile(vcredistFile);
				InstalledSuccesfully := Exec(ExpandConstant('{tmp}\' + vcredistFile), '/qb!', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
				if not InstalledSuccesfully then
				begin
					MsgBox(ErrorInstallVC + SysErrorMessage(ResultCode), mbCriticalError, MB_OK);
					// Still need to install so stop installation:
					NeedToInstallVC := true;
				end;
			end
      else
      begin
        // Don't needed to install so set installed is true:
        InstalledSuccesfully := True;
      end;
		end;
	end;

  Result := Result And R1 And InstalledSuccesfully;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
	if CurUninstallStep = usUninstall then
	begin
		// Check for old MapWinGIS.ocx'es that are registered; unregister them. Don't rename the ocx:
		// Because else the OCX stays shared and won't be deleted:
		CheckForMWOCX(false);
	end;
end;

[InnoIDE_Settings]
#ifdef Debug
  LogFile="C:\BasinsSetupDebug.log"
#endif
